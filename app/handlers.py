from datetime import date

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReactionTypeEmoji, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

from app import constants, utils


class IinInfo(StatesGroup):
    birth_date = State()
    name = State()


router = Router()


@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext) -> None:
    await state.clear()
    text = (f"üîé <b>–ü–æ–∏—Å–∫ –ò–ò–ù</b>\n\n{constants.DATE_REQUEST}")
    await message.answer(text=text)
    await state.set_state(IinInfo.birth_date)


@router.message(IinInfo.birth_date)
async def date_handler(message: Message, state: FSMContext) -> None:
    if message.content_type == "text":
        try:
            birth_date = date.fromisoformat(message.text)
        except ValueError as date_error:
            await message.react([ReactionTypeEmoji(emoji="üëé")])
            await message.reply(text=f"‚ö†Ô∏è –î–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n({date_error})\n{constants.DATE_REQUEST}")
        else:
            await message.react([ReactionTypeEmoji(emoji="‚úç")])
            await message.chat.do(action="typing")
            iins_possible = utils.generate_iins(birth_date, start_suffix=5001, quantity=300)
            await message.chat.do(action="typing")
            iins_postkz = await utils.mass_upd_iins_postkz(iins_possible)
            await state.update_data(iins=iins_postkz)
            await message.answer(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –∏ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Ñ–∞–º–∏–ª–∏–∏.\n–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë</i>")
            await state.set_state(IinInfo.name)
    else:
        await message.react([ReactionTypeEmoji(emoji="üëé")])
        await message.reply(text=f"‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n{date_req}")


@router.message(IinInfo.name)
async def name_handler(message: Message, state: FSMContext) -> None:
    if message.content_type == "text":
        await message.react([ReactionTypeEmoji(emoji="‚úç")])
        await message.chat.do(action="typing")
        input_name = message.text.strip(" .").casefold()
        iins_postkz = (await state.get_data())["iins"]
        iins_matched_postkz = utils.match_name_postkz(input_name, iins_postkz)
        iins_empty_postkz = utils.empty_name_postkz(iins_postkz)
        iins_possible_postkz = iins_matched_postkz + iins_empty_postkz
        iins_nca = await utils.mass_upd_iins_nca(iins_possible_postkz)
        iins_matched_nca = utils.match_name_nca(input_name, iins_nca)
        if len(iins_matched_nca) == 0:
            text = ("‚ùå <b>–ü–æ–¥—Ö–æ–¥—è—â–∏–π –ò–ò–ù –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞. "
                    "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ, —Ç–æ–≥–¥–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫ –ø–æ–∑–∂–µ.")
        else:
            text = f"‚úÖ <b>–ù–∞–π–¥–µ–Ω–æ: {len(iins_matched_nca)} –ò–ò–ù</b>\n"
            if len(iins_matched_nca) > 1:
                text += "–í–∞—à –ò–ò–ù —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö (–∫–æ—Ç–æ—Ä—ã–π —Å –≤–∞—à–∏–º–∏ –§–ò–û).\n"
            text += "\n"
            for iin in iins_matched_nca:
                text += f"<b>–ò–ò–ù:</b> <code>{iin["iin"]}</code>\n"
                if not iin["middle_name"]:
                    iin["middle_name"] = ""
                if not iin["last_name"]:
                    iin["last_name"] = ""
                full_name = f"{iin["last_name"]} {iin["first_name"]} {iin["middle_name"]}".strip().title()
                text += f"<b>–§–ò–û:</b> {full_name}\n"
                text += f"–î–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –Ω–∞–ª–æ–≥–æ–≤–æ–π: {iin["kgd_date"]}\n\n"
            text += ("<i>(—Ç–∫–Ω–∏—Ç–µ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ –ò–ò–ù, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –≤ –±—É—Ñ–µ—Ä)</i>\n\n"
                     "–î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ <b>\"Info\"</b>\n"
                     "–°–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ <b>\"Donate\"</b>")
        await message.answer(text=text, reply_markup=inline_keyboard(0))
    else:
        await message.react([ReactionTypeEmoji(emoji="üëé")])
        await message.reply(text="‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –∏ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Ñ–∞–º–∏–ª–∏–∏.")


@router.message()
async def default_handler(message: Message) -> None:
    await message.react([ReactionTypeEmoji(emoji="ü§∑‚Äç‚ôÇÔ∏è")])
    await message.answer(text="–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /start")


def inline_keyboard(num: int) -> InlineKeyboardMarkup:
    info_button = InlineKeyboardButton(text="‚ÑπÔ∏è Info", callback_data="cb_info")
    donate_button = InlineKeyboardButton(text="üí≥ Donate", callback_data="cb_donate")
    search_button = InlineKeyboardButton(text="üîé –ù–æ–≤—ã–π –ø–æ–∏—Å–∫ –ò–ò–ù", callback_data="cb_search")
    if num == 0:
        markup = InlineKeyboardMarkup(inline_keyboard=[[info_button, donate_button], [search_button]])
    elif num == 1:
        markup = InlineKeyboardMarkup(inline_keyboard=[[donate_button, search_button]])
    elif num == 2:
        markup = InlineKeyboardMarkup(inline_keyboard=[[info_button, search_button]])
    return markup


@router.callback_query(F.data == "cb_search")
async def callback_search(callback: CallbackQuery, state: FSMContext) -> None:
    await start_handler(callback.message, state)
    await callback.answer(text="")


@router.callback_query(F.data == "cb_info")
async def callback_info(callback: CallbackQuery) -> None:
    text = (f"‚ÑπÔ∏è <b>Info</b>\n\n"
            f"–ò–ò–ù —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫—É –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –±–∞–∑—É <a href='{constants.GBDFL_URL}'>–ì–ë–î –§–õ</a>.\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –ò–ò–ù –≤ –ì–ë–î –§–õ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ "
            f"<a href='{constants.NCA_URL}'>—Å–∞–π—Ç –ù–£–¶ –†–ö</a> (–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –£–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–µ–≥–æ –¶–µ–Ω—Ç—Ä–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ "
            f"–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω).\n\n–ß–µ—Ä–µ–∑ 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è –ø–æ—Å–ª–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –ò–ò–ù –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–π—Ç–∏ –Ω–∞–ª–æ–≥–æ–≤—É—é "
            f"—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —á–µ–≥–æ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å –≤ –Ω–∞–ª–æ–≥–æ–≤—É—é –±–∞–∑—É –ö–ì–î –ú–§ –†–ö "
            f"(–Ω–∞–ª–æ–≥–æ–≤–∞—è —Å–ª—É–∂–±–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞).\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –ò–ò–ù –≤ –Ω–∞–ª–æ–≥–æ–≤–æ–π –±–∞–∑–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ "
            f"<a href='{constants.FAFA_URL}'>—ç—Ç–æ–º —Å–∞–π—Ç–µ</a> –∏–ª–∏ —á–µ—Ä–µ–∑ <a href='{constants.POSTKZ_URL}'>—Å–∞–π—Ç "
            f"–ö–∞–∑–ø–æ—á—Ç—ã</a> (—Ç–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –ò–ò–ù –≤ –ø–æ–ª–µ \"–ò–ò–ù/–ñ–°–ù\" –∏, –µ—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –≤–∞—à–µ "
            f"–∏–º—è –∏ –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ —Ñ–∞–º–∏–ª–∏–∏, –∑–Ω–∞—á–∏—Ç –ò–ò–ù –µ—Å—Ç—å –≤ –Ω–∞–ª–æ–≥–æ–≤–æ–π –±–∞–∑–µ).\n\n"
            f"–ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –ò–ò–ù –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ –Ω–µ–¥–µ–ª–∏, –∞ –æ–Ω —Ç–∞–∫ –∏ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –≤ –Ω–∞–ª–æ–≥–æ–≤–æ–π –±–∞–∑–µ, "
            f"–∑–Ω–∞—á–∏—Ç –≤–∞–º –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ö–ì–î –ú–§ –†–ö, —Å–æ–æ–±—â–∏—Ç—å –æ–± —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–µ "
            f"–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞—à –ò–ò–ù –≤ –Ω–∞–ª–æ–≥–æ–≤–æ–π –±–∞–∑–µ.\n\n"
            f"–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—á–µ—Ç–æ–≤/–∫–∞—Ä—Ç –≤ –±–∞–Ω–∫–∞—Ö Kaspi –∏ Freedom Bank –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã –ò–ò–ù –ø—Ä–æ—Å—Ç–æ "
            f"—Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª (–±—ã–ª –≤ –±–∞–∑–µ –ì–ë–î –§–õ). –ê –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—á–µ—Ç–æ–≤/–∫–∞—Ä—Ç –≤–æ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö –±–∞–Ω–∫–∞—Ö "
            f"–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ò–ò–ù –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –≤ –Ω–∞–ª–æ–≥–æ–≤—É—é –±–∞–∑—É.")
    await callback.message.answer(text=text, disable_web_page_preview=True, reply_markup=inline_keyboard(1))
    await callback.answer(text="")


@router.callback_query(F.data == "cb_donate")
async def callback_donate(callback: CallbackQuery) -> None:
    text = ("üí≥ <b>Donate</b>\n\n"
            "–î–∞–Ω–Ω—ã–π –±–æ—Ç - —ç—Ç–æ –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç.\n"
            "–ï—Å–ª–∏ –±–æ—Ç –≤–∞–º –ø–æ–º–æ–≥, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ "
            f"<a href='{constants.DONATE_URL}'>–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ–º</a>")
    await callback.message.answer(text=text, disable_web_page_preview=True, reply_markup=inline_keyboard(2))
    await callback.answer(text="")
