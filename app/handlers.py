from datetime import date
from pathlib import Path
from random import randint

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message,
    ReactionTypeEmoji,
    CallbackQuery,
    FSInputFile,
    BufferedInputFile,
)

from app import constants, pdfgen, utils, keyboards as kb


class BotStatus(StatesGroup):
    input_birth_date = State()
    input_name = State()
    choose_iin = State()
    country_request = State()
    input_country = State()
    input_region = State()
    send_pdf = State()


router = Router()


@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext) -> None:
    await state.clear()
    text = f"üîé <b>–ü–æ–∏—Å–∫ –ò–ò–ù</b>\n\n{constants.DATE_REQUEST}"
    await message.answer(text=text)
    await state.set_state(BotStatus.input_birth_date)


@router.message(F.text, BotStatus.input_birth_date)
async def date_handler(message: Message, state: FSMContext) -> None:
    try:
        birth_date = date.fromisoformat(message.text)
    except ValueError as date_error:
        await message.react([ReactionTypeEmoji(emoji="üëé")])
        await message.reply(
            text=f"‚ö†Ô∏è –î–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n({date_error})\n{constants.DATE_REQUEST}"
        )
    else:
        await message.react([ReactionTypeEmoji(emoji="‚úç")])
        await message.chat.do(action="typing")
        await state.update_data(birth_date=birth_date)
        await message.answer(
            text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –∏ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Ñ–∞–º–∏–ª–∏–∏.\n–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë</i>"
        )
        await state.set_state(BotStatus.input_name)


@router.message(F.text, BotStatus.input_name)
async def name_handler(message: Message, state: FSMContext) -> None:
    await message.react([ReactionTypeEmoji(emoji="‚úç")])
    await message.chat.do(action="typing")
    name = message.text.strip(" .").casefold()
    await state.update_data(name=name)
    data = await state.get_data()
    text = (
        "ü§ñüîé –ù–∞—á–∞–ª –ø–æ–∏—Å–∫ –ò–ò–ù —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n\n"
        f"<b>‚ó¶ –ò–ò–ù:</b> {data['birth_date']:%y%m%d}05xxxx\n"
        f"<b>‚ó¶ –ò–º—è:</b> {str.title(data['name'])}\n"
        f"<b>‚ó¶ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {data['birth_date']}\n\n"
        "–ñ–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)... ‚è±Ô∏è"
    )
    await message.answer(text=text)
    await message.chat.do(action="typing")
    iins_found = await utils.find_iin(
        birth_date=data["birth_date"], name=data["name"], digit_8th=5
    )
    await state.update_data(iins_found=iins_found)
    if len(iins_found) == 0:
        text = f"{constants.NOT_FOUND_TEXT}{constants.DEEP_SEARCH_TEXT}"
    else:
        text = f"‚úÖ <b>–ù–∞–π–¥–µ–Ω–æ: {len(iins_found)} –ò–ò–ù</b>\n"
        if len(iins_found) > 1:
            text += "–í–∞—à –ò–ò–ù —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö (–∫–æ—Ç–æ—Ä—ã–π —Å –≤–∞—à–∏–º–∏ –§–ò–û).\n"
        text += "\n"
        for iin in iins_found:
            text += f"<b>–ò–ò–ù:</b> <code>{iin['iin']}</code>\n"
            full_name = utils.get_full_name(iin)
            text += f"<b>–§–ò–û:</b> {full_name}\n"
            text += "–î–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –Ω–∞–ª–æ–≥–æ–≤–æ–π: "
            if iin["kgd_date"]:
                text += f"{iin['kgd_date']}\n\n"
            else:
                text += '(–Ω–µ—Ç) - —Å–º. "Info"\n\n'
        text += (
            "<i>(—Ç–∫–Ω–∏—Ç–µ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ –ò–ò–ù, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –≤ –±—É—Ñ–µ—Ä)</i>\n\n"
            '–°–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ <b>"Donate"</b>\n\n'
            "ü§∑‚Äç‚ôÇÔ∏è <b>–°—Ä–µ–¥–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ò–ò–ù –Ω–µ—Ç –≤–∞—à–µ–≥–æ?</b>\n"
            f"{constants.DEEP_SEARCH_TEXT}"
        )
    await message.answer(text=text, reply_markup=kb.standard_search_result)


@router.callback_query(F.data == "cb_standard_search")
async def callback_standard_search(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer(text="")
    await start_handler(callback.message, state)


@router.callback_query(F.data == "cb_deep_search")
async def callback_deep_search(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer(text="")
    data = await state.get_data()
    if not data.get("name"):
        await default_handler(callback.message)
    else:
        text = (
            "ü§ñüîé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â—É (—Å—Ä–µ–¥–∏ –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö –ò–ò–ù):\n\n"
            f"<b>‚ó¶ –ò–ò–ù:</b> {data['birth_date']:%y%m%d}00xxxx\n"
            f"<b>‚ó¶ –ò–º—è:</b> {str.title(data['name'])}\n"
            f"<b>‚ó¶ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</b>: {data['birth_date']}\n\n"
            "–ñ–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)... ‚è±Ô∏è"
        )
        await callback.message.answer(text=text)
        await callback.message.chat.do(action="typing")
        iins_found = await utils.find_iin(
            birth_date=data["birth_date"], name=data["name"], digit_8th=0
        )
        await state.update_data(iins_found=iins_found)
        if len(iins_found) == 0:
            text = f"{constants.NOT_FOUND_TEXT}"
        else:
            text = f"‚úÖ <b>–ù–∞–π–¥–µ–Ω–æ: {len(iins_found)} –ò–ò–ù</b>\n"
            if len(iins_found) > 1:
                text += "–í–∞—à –ò–ò–ù —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö (–∫–æ—Ç–æ—Ä—ã–π —Å –≤–∞—à–∏–º–∏ –§–ò–û).\n"
            text += "\n"
            for iin in iins_found:
                text += f"<b>–ò–ò–ù:</b> <code>{iin['iin']}</code>\n"
                full_name = utils.get_full_name(iin)
                text += f"<b>–§–ò–û:</b> {full_name}\n"
                text += "–î–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –Ω–∞–ª–æ–≥–æ–≤–æ–π: "
                if iin["kgd_date"]:
                    text += f"{iin['kgd_date']}\n\n"
                else:
                    text += '(–Ω–µ—Ç) - —Å–º. "Info"\n\n'
            text += (
                "<i>(—Ç–∫–Ω–∏—Ç–µ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ –ò–ò–ù, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –≤ –±—É—Ñ–µ—Ä)</i>\n\n"
                '–°–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ <b>"Donate"</b>'
            )
        await callback.message.answer(text=text, reply_markup=kb.deep_search_result)


@router.callback_query(F.data == "cb_info")
async def callback_info(callback: CallbackQuery) -> None:
    await callback.answer(text="")
    text = (
        f"‚ÑπÔ∏è <b>Info</b>\n\n"
        f"–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç/—Å—á–µ—Ç–æ–≤ –≤ –±–∞–Ω–∫–∞—Ö Kaspi –∏ Freedom Bank –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã –ò–ò–ù –ø—Ä–æ—Å—Ç–æ "
        f"–±—ã–ª –ø—Ä–∏—Å–≤–æ–µ–Ω —á–µ–ª–æ–≤–µ–∫—É (—Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª –≤ –±–∞–∑–µ –ì–ë–î –§–õ). –î–ª—è —ç—Ç–∏—Ö –¥–≤—É—Ö –±–∞–Ω–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ò–ò–ù "
        f"–≤ –±–∞–∑—É –Ω–∞–ª–æ–≥–æ–≤–æ–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.\n–ê –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç/—Å—á–µ—Ç–æ–≤ –≤–æ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö –±–∞–Ω–∫–∞—Ö "
        f"–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ò–ò–ù –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –≤ –Ω–∞–ª–æ–≥–æ–≤—É—é –±–∞–∑—É.\n\n"
        f"–ò–ò–ù —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫—É –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –±–∞–∑—É <a href='{constants.GBDFL_URL}'>–ì–ë–î –§–õ</a>.\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –ò–ò–ù –≤ –ì–ë–î –§–õ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ "
        f"<a href='{constants.NCA_URL}'>—Å–∞–π—Ç –ù–£–¶ –†–ö</a> (–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –£–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–µ–≥–æ –¶–µ–Ω—Ç—Ä–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ "
        f"–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω).\n\n–ß–µ—Ä–µ–∑ 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è –ø–æ—Å–ª–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –ò–ò–ù –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–π—Ç–∏ –Ω–∞–ª–æ–≥–æ–≤—É—é "
        f"—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —á–µ–≥–æ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å –≤ –Ω–∞–ª–æ–≥–æ–≤—É—é –±–∞–∑—É –ö–ì–î –ú–§ –†–ö "
        f"(–Ω–∞–ª–æ–≥–æ–≤–∞—è —Å–ª—É–∂–±–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞).\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –ò–ò–ù –≤ –Ω–∞–ª–æ–≥–æ–≤–æ–π –±–∞–∑–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ "
        f"<a href='{constants.FAFA_URL}'>—ç—Ç–æ–º —Å–∞–π—Ç–µ</a> –∏–ª–∏ —á–µ—Ä–µ–∑ <a href='{constants.POSTKZ_URL}'>—Å–∞–π—Ç "
        f'–ö–∞–∑–ø–æ—á—Ç—ã</a> (—Ç–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –ò–ò–ù –≤ –ø–æ–ª–µ "–ò–ò–ù/–ñ–°–ù" –∏, –µ—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –≤–∞—à–µ '
        f"–∏–º—è –∏ –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ —Ñ–∞–º–∏–ª–∏–∏, –∑–Ω–∞—á–∏—Ç –ò–ò–ù –µ—Å—Ç—å –≤ –Ω–∞–ª–æ–≥–æ–≤–æ–π –±–∞–∑–µ).\n\n"
        f"–ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –ò–ò–ù –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ –Ω–µ–¥–µ–ª–∏, –∞ –ò–ò–ù —Ç–∞–∫ –∏ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –≤ –Ω–∞–ª–æ–≥–æ–≤–æ–π –±–∞–∑–µ, "
        f"–∑–Ω–∞—á–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ò–ò–ù –≤ –Ω–∞–ª–æ–≥–æ–≤—É—é –±–∞–∑—É –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ "
        f"(—Ç–∞–∫–æ–µ –∏–Ω–æ–≥–¥–∞ —Å–ª—É—á–∞–µ—Ç—Å—è). –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ, —á—Ç–æ–±—ã –ò–ò–ù –≤—Å—ë –∂–µ –ø–æ—è–≤–∏–ª—Å—è –≤ –Ω–∞–ª–æ–≥–æ–≤–æ–π –±–∞–∑–µ, "
        f"–≤–∞–º –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –Ω–∞–ª–æ–≥–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ö–ì–î –ú–§ –†–ö, —Å–æ–æ–±—â–∏—Ç—å –æ–± —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–µ "
        f"–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞—à –ò–ò–ù –≤ –Ω–∞–ª–æ–≥–æ–≤–æ–π –±–∞–∑–µ."
    )
    await callback.message.answer(
        text=text, disable_web_page_preview=True, reply_markup=kb.info
    )


@router.callback_query(F.data == "cb_donate")
async def callback_donate(callback: CallbackQuery) -> None:
    await callback.answer(text="")
    text = (
        "üí≥ <b>Donate</b>\n\n"
        "–î–∞–Ω–Ω—ã–π –±–æ—Ç - —ç—Ç–æ –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç.\n"
        "–ï—Å–ª–∏ –±–æ—Ç –≤–∞–º –ø–æ–º–æ–≥, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ "
        f"<a href='{constants.DONATE_URL}'>–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ–º</a>"
    )
    await callback.message.answer(
        text=text, disable_web_page_preview=True, reply_markup=kb.donate
    )


@router.callback_query(F.data == "cb_print")
async def callback_print(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer(text="")
    text = (
        "üñ®Ô∏è <b>–†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –ò–ò–ù</b>\n\n"
        "–î–ª—è —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã Freedom Bank –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é "
        "—Ä–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞—Ç—å –ò–ò–ù –Ω–∞ –±—É–º–∞–≥–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (—Ç–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ "
        "–≤–≤–µ—Å—Ç–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–≤–æ–π –ò–ò–ù –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ, –∞ —Ç–∞–∫–∂–µ "
        "–≤–æ –≤—Ä–µ–º—è –≤–∏–¥–µ–æ-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–¥–∏–∫—Ç–æ–≤–∞—Ç—å –≤—Å–µ —Ü–∏—Ñ—Ä—ã —Å–≤–æ–µ–≥–æ –ò–ò–ù)."
        "\n\n–†–∞—Å–ø–µ—á–∞—Ç–∫–∞ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ò–ò–ù –Ω–∞ –±—É–º–∞–≥–µ –Ω—É–∂–Ω–∞, "
        "–µ—Å–ª–∏ –≤—ã –ø–æ–π–¥—ë—Ç–µ –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ –ª–∏—á–Ω–æ "
        "–æ—Ñ–æ—Ä–º–ª—è—Ç—å –∫–∞—Ä—Ç—ã/—Å—á–µ—Ç–∞.\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ò–ò–ù –Ω–∞ –±—É–º–∞–≥–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏ –≤ –ª—é–±–æ–π –¶–û–ù –Ω–∞ "
        "—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —Ç–∞–º –≤–∞—à –ò–ò–ù. "
        "–ò–ª–∏ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ —Å–∫–∞—á–∞—Ç—å –∑–¥–µ—Å—å –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –Ω–∞ –±—É–º–∞–≥–µ "
        "—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ò–ò–ù, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ "
        "–ø–æ—Å–µ—â–µ–Ω–∏–µ –¶–û–ù –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ."
    )
    data = await state.get_data()
    if data.get("iins_found"):
        found_quantity = len(data["iins_found"])
        await callback.message.answer(
            text=text, reply_markup=kb.print_iin(found_quantity=found_quantity)
        )
    else:
        await callback.message.answer(
            text=text, reply_markup=kb.print_iin(found_quantity=0)
        )


@router.callback_query(F.data == "cb_rtf")
async def callback_rtf(callback: CallbackQuery) -> None:
    await callback.answer(text="")
    file_path = Path("app", "doc_templates", f"iin_template_{randint(1,3)}.rtf")
    caption = (
        f"üìù –°–∫–∞—á–∞–π—Ç–µ –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç RTF-–¥–æ–∫—É–º–µ–Ω—Ç.\n{constants.RTF_DOCX_CAPTION}"
    )
    await callback.message.answer_document(
        document=FSInputFile(path=file_path), caption=caption, reply_markup=kb.info
    )


@router.callback_query(F.data == "cb_docx")
async def callback_docx(callback: CallbackQuery) -> None:
    await callback.answer(text="")
    file_path = Path("app", "doc_templates", f"iin_template_{randint(1,3)}.docx")
    caption = f"üìù –°–∫–∞—á–∞–π—Ç–µ –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç DOCX-–¥–æ–∫—É–º–µ–Ω—Ç.\n{constants.RTF_DOCX_CAPTION}"
    await callback.message.answer_document(
        document=FSInputFile(path=file_path), caption=caption, reply_markup=kb.info
    )


@router.callback_query(F.data == "cb_pdf_start")
async def callback_pdf_start(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer(text="")
    data = await state.get_data()
    if not data.get("iins_found"):
        await default_handler(callback.message)
    elif len(data["iins_found"]) == 1:
        await state.update_data(index=0)
        await state.set_state(BotStatus.country_request)
        await country_request(callback, state)
    elif len(data["iins_found"]) > 1:
        text = "<b>–ö–∞–∫–æ–π –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ò–ò–ù –≤–∞—à?</b>\n\n"
        for n, iin in enumerate(data["iins_found"], start=1):
            text += f"{n}:\n"
            text += f"<b>–ò–ò–ù:</b> {iin['iin']}\n"
            text += f"<b>–§–ò–û:</b> {utils.get_full_name(iin)}\n\n"
        await callback.message.answer(
            text=text, reply_markup=kb.choose_iin(len(data["iins_found"]))
        )
        await state.set_state(BotStatus.choose_iin)


@router.callback_query(F.data.startswith("pdf:"), BotStatus.choose_iin)
async def callback_choose_iin(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer(text="")
    await state.update_data(index=int(callback.data.removeprefix("pdf:")))
    await state.set_state(BotStatus.country_request)
    await country_request(callback, state)


@router.callback_query(BotStatus.country_request)
async def country_request(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    iin = data["iins_found"][data["index"]]
    text = (
        f"<b>‚ó¶ –ò–ò–ù:</b> {iin["iin"]}\n"
        f"<b>‚ó¶ –§–ò–û:</b> {utils.get_full_name(iin)}\n\n"
        "üåé <b>–°—Ç—Ä–∞–Ω–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ-—Ä—É—Å—Å–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–≥—Ä–∞–Ω. "
        "–ø–∞—Å–ø–æ—Ä—Ç–æ–º, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ñ–æ—Ä–º–ª—è–ª—Å—è –ò–ò–ù.\n"
        '–ï—Å–ª–∏ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ —É–∫–∞–∑–∞–Ω–æ "USSR", —Ç–æ–≥–¥–∞ —É–∫–∞–∂–∏—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ '
        "–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞–Ω—ã.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–†–æ—Å—Å–∏—è</i> –∏–ª–∏ <i>–£–∫—Ä–∞–∏–Ω–∞</i> –∏–ª–∏ <i>–ú–æ–ª–¥–æ–≤–∞</i> "
        "–∏–ª–∏ <i>–ì—Ä—É–∑–∏—è</i> –∏–ª–∏ <i>–õ–∞—Ç–≤–∏—è</i>"
    )
    await callback.message.answer(text=text, reply_markup=kb.country)
    await state.set_state(BotStatus.input_country)


@router.message(F.text, BotStatus.input_country)
async def country_handler(message: Message, state: FSMContext) -> None:
    await state.update_data(country=message.text)
    text = (
        "üåé <b>–†–µ–≥–∏–æ–Ω (–∏–ª–∏ –≥–æ—Ä–æ–¥) —Ä–æ–∂–¥–µ–Ω–∏—è</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω (–∏–ª–∏ –≥–æ—Ä–æ–¥) —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ-—Ä—É—Å—Å–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ "
        "—Å –∑–∞–≥—Ä–∞–Ω. –ø–∞—Å–ø–æ—Ä—Ç–æ–º, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ñ–æ—Ä–º–ª—è–ª—Å—è –ò–ò–ù.\n"
        '–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è "–û–ë–õ.", "–ì–û–†.", "–ì." –Ω–µ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ, —Ç–æ–ª—å–∫–æ '
        "–æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞/–≥–æ—Ä–æ–¥–∞.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ú–æ—Å–∫–≤–∞</i> –∏–ª–∏ <i>–ú–æ—Å–∫–æ–≤—Å–∫–∞—è</i> –∏–ª–∏ <i>–ì–æ—Ä—å–∫–æ–≤—Å–∫–∞—è</i>\n\n"
        "–ï—Å–ª–∏ –∫—Ä–æ–º–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Ä–µ–≥–∏–æ–Ω –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ "
        '–Ω–µ —É–∫–∞–∑–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ "–£–ö–†–ê–ò–ù–°–ö–ê–Ø –°–°–† / USSR"), —Ç–æ–≥–¥–∞ '
        "–Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω—É —Ç–æ—á–∫—É"
    )
    await message.answer(text=text, reply_markup=kb.remove)
    await state.set_state(BotStatus.send_pdf)


@router.message(F.text, BotStatus.send_pdf)
async def send_pdf(message: Message, state: FSMContext) -> None:
    await state.update_data(region=message.text)
    data = await state.get_data()
    index = data["index"]
    iin_data = data["iins_found"][index]
    birth_date = data["birth_date"]
    if data["region"] == ".":
        birth_location = data["country"].title()
    else:
        birth_location = f"{data["country"].title()}   {data["region"].upper()}"
    file_name = f"iin_{iin_data["iin"]}.pdf"
    pdf_data = pdfgen.generate_pdf(
        iin_data=iin_data, birth_date=birth_date, birth_location=birth_location
    )
    caption = (
        "üñ®Ô∏è –†–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ —ç—Ç–æ—Ç PDF-–¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –ª–∏—Å—Ç–∞ –ê4 "
        "—Å –∞–ª—å–±–æ–º–Ω–æ–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π) –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã."
    )
    await message.answer_document(
        document=BufferedInputFile(file=pdf_data, filename=file_name),
        caption=caption,
        reply_markup=kb.info,
    )
    await state.clear()


@router.message()
async def default_handler(message: Message) -> None:
    await message.react([ReactionTypeEmoji(emoji="ü§∑‚Äç‚ôÇÔ∏è")])
    text = (
        "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –ò–ò–ù, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /start"
    )
    await message.answer(text=text)
